<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0&#10;                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;!-- 1. Use Spring Boot Parent to Manage Versions --&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;2.5.12&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;codetools&lt;/artifactId&gt;&#10;    &lt;version&gt;0.1.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;1.8&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Web Starter --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;            &lt;version&gt;2.5.12&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Jackson Databind with explicit version --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#10;            &lt;version&gt;2.12.7.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- SLF4J API (version managed) --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;1.7.32&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Logback Classic (version managed) --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JUnit (for tests; version managed by Spring Boot Starter Test) --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Lombok for @Slf4j and other annotations --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;version&gt;1.18.32&lt;/version&gt;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0&#10;                             http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;!-- 1. Use Spring Boot Parent to Manage Versions --&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;2.5.12&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;codetools&lt;/artifactId&gt;&#10;    &lt;version&gt;0.1.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;1.8&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Web Starter --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;            &lt;version&gt;2.5.12&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Jackson Databind with explicit version --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#10;            &lt;version&gt;2.12.7.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- SLF4J API (version managed) --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;1.7.32&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Logback Classic (version managed) --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JUnit (for tests; version managed by Spring Boot Starter Test) --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Lombok for @Slf4j and other annotations --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;version&gt;1.18.32&lt;/version&gt;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;repositories&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;central&lt;/id&gt;&#10;            &lt;name&gt;Maven Central Repository&lt;/name&gt;&#10;            &lt;url&gt;https://repo.maven.apache.org/maven2&lt;/url&gt;&#10;            &lt;releases&gt;&#10;                &lt;enabled&gt;true&lt;/enabled&gt;&#10;            &lt;/releases&gt;&#10;            &lt;snapshots&gt;&#10;                &lt;enabled&gt;false&lt;/enabled&gt;&#10;            &lt;/snapshots&gt;&#10;        &lt;/repository&gt;&#10;    &lt;/repositories&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;!-- Spring Boot Maven Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/codetools/Application.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/codetools/Application.java" />
              <option name="updatedContent" value="package com.example.codetools;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class Application {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(Application.class, args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/codetools/CodeSnippet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/codetools/CodeSnippet.java" />
              <option name="originalContent" value="package com.example.codetools;&#10;&#10;public class CodeSnippet {&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.codetools;&#10;&#10;public class CodeSnippet {&#10;    private String path;&#10;    private String content;&#10;&#10;    public String getPath() {&#10;        return path;&#10;    }&#10;&#10;    public void setPath(String path) {&#10;        this.path = path;&#10;    }&#10;&#10;    public String getContent() {&#10;        return content;&#10;    }&#10;&#10;    public void setContent(String content) {&#10;        this.content = content;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/codetools/FileScanner.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/codetools/FileScanner.java" />
              <option name="originalContent" value="package com.example.codetools;&#10;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.stereotype.Service;&#10;import javax.annotation.PostConstruct;&#10;import java.io.IOException;&#10;import java.nio.file.*;&#10;import java.util.*;&#10;import java.util.stream.*;&#10;@SLF4J&#10;@SLF4J&#10;@Service&#10;public class FileScanner {&#10;    private static final Logger log = LoggerFactory.getLogger(FileScanner.class);&#10;&#10;    private static final Logger log = LoggerFactory.getLogger(FileScanner.class);&#10;    private final Map&lt;String, String&gt; index = new HashMap&lt;&gt;();&#10;    private final String rootPath;&#10;&#10;    public FileScanner(org.springframework.core.env.Environment env) {&#10;        this.rootPath = env.getProperty(&quot;scanner.root.path&quot;);&#10;    }&#10;&#10;    @PostConstruct&#10;    public void scanRoot() throws IOException {&#10;        Path root = Paths.get(rootPath);&#10;        try (Stream&lt;Path&gt; paths = Files.walk(root)) {&#10;            paths.filter(Files::isRegularFile)&#10;                    .filter(p -&gt; p.toString().endsWith(&quot;.java&quot;) || p.toString().endsWith(&quot;.js&quot;))&#10;                    .forEach(this::indexFile);&#10;        }&#10;        log.info(&quot;Indexed {} files&quot;, index.size());&#10;    }&#10;&#10;    private void indexFile(Path file) {&#10;        try {&#10;            String content = new String(Files.readAllBytes(file));&#10;            Path root = Paths.get(rootPath);&#10;            index.put(root.relativize(file).toString(), content);&#10;        } catch (IOException e) {&#10;            log.warn(&quot;Failed to read {}&quot;, file, e);&#10;        }&#10;    }&#10;&#10;    public List&lt;QueryModels.CodeSnippet&gt; fetchSnippets(List&lt;String&gt; paths, int max) {&#10;        return index.entrySet()&#10;                .stream()&#10;                .filter(e -&gt; paths == null || paths.isEmpty() || paths.contains(e.getKey()))&#10;                .limit(max)&#10;                .map(e -&gt; {&#10;                    QueryModels.CodeSnippet s = new QueryModels.CodeSnippet();&#10;                    s.setPath(e.getKey());&#10;                    s.setContent(e.getValue());&#10;                    return s;&#10;                })&#10;                .collect(Collectors.toList());&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.codetools;&#10;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.stereotype.Service;&#10;import javax.annotation.PostConstruct;&#10;import java.io.IOException;&#10;import java.nio.file.*;&#10;import java.util.*;&#10;import java.util.stream.*;&#10;&#10;@Slf4j&#10;@Service&#10;public class FileScanner {&#10;&#10;    private final Map&lt;String, String&gt; index = new HashMap&lt;&gt;();&#10;    private final String rootPath;&#10;&#10;    public FileScanner(org.springframework.core.env.Environment env) {&#10;        this.rootPath = env.getProperty(&quot;scanner.root.path&quot;);&#10;    }&#10;&#10;    @PostConstruct&#10;    public void scanRoot() throws IOException {&#10;        Path root = Paths.get(rootPath);&#10;        try (Stream&lt;Path&gt; paths = Files.walk(root)) {&#10;            paths.filter(Files::isRegularFile)&#10;                    .filter(p -&gt; p.toString().endsWith(&quot;.java&quot;) || p.toString().endsWith(&quot;.js&quot;))&#10;                    .forEach(this::indexFile);&#10;        }&#10;        log.info(&quot;Indexed {} files&quot;, index.size());&#10;    }&#10;&#10;    private void indexFile(Path file) {&#10;        try {&#10;            String content = new String(Files.readAllBytes(file));&#10;            Path root = Paths.get(rootPath);&#10;            index.put(root.relativize(file).toString(), content);&#10;        } catch (IOException e) {&#10;            log.warn(&quot;Failed to read {}&quot;, file, e);&#10;        }&#10;    }&#10;&#10;    public List&lt;QueryModels.CodeSnippet&gt; fetchSnippets(List&lt;String&gt; paths, int max) {&#10;        return index.entrySet()&#10;                .stream()&#10;                .filter(e -&gt; paths == null || paths.isEmpty() || paths.contains(e.getKey()))&#10;                .limit(max)&#10;                .map(e -&gt; {&#10;                    QueryModels.CodeSnippet s = new QueryModels.CodeSnippet();&#10;                    s.setPath(e.getKey());&#10;                    s.setContent(e.getValue());&#10;                    return s;&#10;                })&#10;                .collect(Collectors.toList());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/codetools/QueryModels.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/codetools/QueryModels.java" />
              <option name="originalContent" value="package com.example.codetools;&#10;&#10;import java.util.List;&#10;&#10;public class QueryModels {&#10;&#10;    public static class CodeSnippet {&#10;        private String path;&#10;        private String content;&#10;&#10;        public String getPath() {&#10;            return path;&#10;        }&#10;&#10;        public void setPath(String path) {&#10;            this.path = path;&#10;        }&#10;&#10;        public String getContent() {&#10;            return content;&#10;        }&#10;&#10;        public void setContent(String content) {&#10;            this.content = content;&#10;        }&#10;        // getters/setters&#10;    }&#10;&#10;    public static class QueryRequest {&#10;        private String question;&#10;        private List&lt;String&gt; paths;   // optional filter&#10;        // getters/setters&#10;" />
              <option name="updatedContent" value="package com.example.codetools;&#10;&#10;import java.util.List;&#10;&#10;public class QueryModels {&#10;&#10;    public static class CodeSnippet {&#10;        private String path;&#10;        private String content;&#10;&#10;        public String getPath() {&#10;            return path;&#10;        }&#10;&#10;        public void setPath(String path) {&#10;            this.path = path;&#10;        }&#10;&#10;        public String getContent() {&#10;            return content;&#10;        }&#10;&#10;        public void setContent(String content) {&#10;            this.content = content;&#10;        }&#10;        // getters/setters&#10;    }&#10;&#10;    public static class QueryRequest {&#10;        private String question;&#10;        private List&lt;String&gt; paths;   // optional filter&#10;&#10;        public String getQuestion() {&#10;            return question;&#10;        }&#10;        public void setQuestion(String question) {&#10;            this.question = question;&#10;        }&#10;        public List&lt;String&gt; getPaths() {&#10;            return paths;&#10;        }&#10;        public void setPaths(List&lt;String&gt; paths) {&#10;            this.paths = paths;&#10;        }&#10;    }&#10;&#10;    public static class QueryResponse {&#10;        private String answer;&#10;&#10;        public String getAnswer() {&#10;            return answer;&#10;        }&#10;        public void setAnswer(String answer) {&#10;            this.answer = answer;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>